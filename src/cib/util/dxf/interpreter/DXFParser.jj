/* 
 * Copyright (C) 2007-2012 Berthold Firmenich
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, look at "http://www.gnu.org/copyleft/gpl.html" or
 * write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 * 
 * Contact address: berthold.firmenich@cademia.org
 * Homepage       : http://www.cademia.org/
 */

options {
    JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = false;
    STATIC = false;
}

PARSER_BEGIN(DXFParser)
 
package cib.util.dxf.interpreter;

import java.io.File; 
import java.io.FileInputStream; 
import java.io.InputStream; 
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
 
import cib.util.dxf.Attributes;
import cib.util.dxf.AttributesAdapter;
import cib.util.dxf.ContentHandler;
import cib.util.dxf.GroupCode;
import cib.util.dxf.QuitDXFParserException;

/** 
 * The DXF parser. Applications can quit DXF parsing by throwing the
 * QuitDXFParserException.
 *
 * @author Berthold Firmenich, Christian Koch
 * @version $Revision: 1717 $, $Author: svn-firmenich $
 * @version $Date: 2012-02-29 14:42:17 +0100 (Wed, 29 Feb 2012) $
 */

public class DXFParser {

	private ContentHandler m_ch = null;
  
	public static void main(String[] args) {
 		// Usage
      	if (args.length != 1) {
        	System.out.println("Usage: DXFParser filename");
        	System.exit(0);
      	}

		// Open file
      	FileInputStream myStream = null;
      	try {
        	myStream = new FileInputStream(new File(args[0]));
      	}
      	catch (IOException e) {
        	System.out.println(e);
        	System.exit(1);
      	}
      
      	// Parse file
    	DXFParser myParser;
      	myParser = new DXFParser(myStream);
        try {
			myParser.start();
        }
        catch (TokenMgrError x) {
          	System.out.println(x);
          	System.exit(2);
        }
        catch (ParseException x) {
          	System.out.println(x);
          	System.exit(0);
        }
    }
    
    // Entity notification
    private String m_seqName = null;
	private void notifyEntity(AttributesAdapter attr) {
		// Check element type...
		String type = attr.getValue(GroupCode.GC0);
		
		// End of sequence?
		if (type.equals("SEQEND")) {
			if (m_seqName == null)
				throw new AssertionError("Unexpected SEQEND");
			m_ch.endElement(m_seqName);
			m_seqName = null;
			return;
		}

		// Format element name
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String name = type + "@" + val5;

		// Start of sequence?
		if (type.equals("POLYLINE")) {
			if (m_seqName != null)
				throw new AssertionError("Unexpected start of SEQ");
			m_seqName = name;
			m_ch.startElement(name, attr);
			return;
		}
		else if (type.equals("INSERT")) {
			if (m_seqName != null)
				throw new AssertionError("Unexpected start of SEQ");
			if (attr.valueExists(GroupCode.GC66)) {
				String val66 = attr.getValue(GroupCode.GC66);
				if (val66.endsWith("1")) {
					m_seqName = name;
					m_ch.startElement(name, attr);
					return;
				}
			}
		}

		// Ordinary element
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
	}
    
	// Return the current content handler.
    public ContentHandler getContentHandler() {
        return m_ch;
    }

    // Allow an application to register a content event handler.
    public void setContentHandler(ContentHandler handler) {
        m_ch = handler;
    }
}
PARSER_END(DXFParser)

SKIP :
{
	<([" "])* "999" "\r\n" (~["\r", "\n"])* "\r\n">
|	<([" "])* "999" "\n" (~["\r", "\n"])* "\n">
}

TOKEN :
{
	< EOL: "\r\n" | "\n">
}

TOKEN :
{
	< SEC_START :   ([" "])* "0" <EOL> "SECTION" <EOL> >
|	< SEC_END :     ([" "])* "0" <EOL> "ENDSEC" <EOL> >
|	< FILE_EOF :    ([" "])* "0" <EOL> "EOF" <EOL> >
|	< S_HEADER :    ([" "])* "2" <EOL> "HEADER" <EOL> >
|	< S_CLASSES :   ([" "])* "2" <EOL> "CLASSES" <EOL> >
|	< S_TABLES :    ([" "])* "2" <EOL> "TABLES" <EOL> >
|	< S_BLOCKS :    ([" "])* "2" <EOL> "BLOCKS" <EOL> >
|	< S_ENTITIES :  ([" "])* "2" <EOL> "ENTITIES" <EOL> >
|	< S_OBJECTS :   ([" "])* "2" <EOL> "OBJECTS" <EOL> >
|	< S_THUMBS :    ([" "])* "2" <EOL> "THUMBNAILIMAGE" <EOL> >
|	< BLK_START :   ([" "])* "0" <EOL> "BLOCK" <EOL> >
|	< BLK_END :     ([" "])* "0" <EOL> "ENDBLK" <EOL> >
|	< TABLE_START : ([" "])* "0" <EOL> "TABLE" <EOL> >
|	< TABLE_END :   ([" "])* "0" <EOL> "ENDTAB" <EOL> >
|	< #GROUP_CODE :	([" "])* (["0"-"9"])+ >
|	< #TEXT :       <EOL> (~["\r", "\n"])* <EOL> >
|	< TOKEN_0 :		([" "])* "0" <TEXT> >
|	< TOKEN_9 :		([" "])* "9" <TEXT> >
|	< TOKEN_X :		<GROUP_CODE> <TEXT> >
}

void start() :
{
}
{
	{
		try {
			file();
		}
		catch (QuitDXFParserException e) {
			throw e;
		}
		catch (RuntimeException e) {
			int line = token == null ? -1 : token.beginLine;
			int column = token == null ? -1 : token.beginColumn;
			String tokenImage = token == null ? "" : token.image;
			
			StackTraceElement[]	ste = e.getStackTrace(); 
			String steStr = " at\n";
			for (int i = 0; i < ste.length; i++) {
				steStr += "\t" + ste[i] + "\n";
			}
			
			throw new ParseException("Error while parsing line " + line +
				" and column " + column + ":\n" + tokenImage +
				"\ngot a RuntimeException " + e + steStr);
		}
	}
}

void file() :  // DXF file consists of sections
{
}
{
	( <SEC_START> section() <SEC_END> )* <FILE_EOF>
}

void section() :
{
}
{
	 sectionHeader() | sectionClasses() | sectionTables() | sectionBlocks() |
	 sectionEntities() | sectionObjects() | sectionThumbs()
}

// Section HEADER --------------------------------------------------------------

void sectionHeader() :
{
}
{
	<S_HEADER>
	{ 
		m_ch.startSection("HEADER");
  	}
  	( variable() )*
	{ 
		m_ch.endSection("HEADER");
  	}
}

void variable() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_9>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{ 
		attr.setLastParsedLine(tok.beginLine + 1);
		String name = attr.getValue(GroupCode.GC9);
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
  	}
}

// Section CLASSES -------------------------------------------------------------

void sectionClasses() :
{
}
{
	<S_CLASSES>
  	{
		m_ch.startSection("CLASSES");
  	}
  	(aClass() )*
	{ 
		m_ch.endSection("CLASSES");
  	}
}

void aClass() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_0>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{ 
		attr.setLastParsedLine(tok.beginLine + 1);
		String name = attr.getValue(GroupCode.GC1);
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
  	}
}

// Section TABLES  -------------------------------------------------------------

void sectionTables() :
{
	String name;
}
{
	<S_TABLES>
  	{
		m_ch.startSection("TABLES");
  	}
  	( name = tableStart() ( tableEntry() )* tableEnd(name) )*
	{ 
		m_ch.endSection("TABLES");
  	}
}

String tableStart() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TABLE_START>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String name = attr.getValue(GroupCode.GC2) + "@" + val5;
		m_ch.startTable(name, attr);
		return name;
  	}
}

void tableEnd(String name) :
{
	Token tok;
}
{
	<TABLE_END> ( <TOKEN_X> )*
	{
		m_ch.endTable(name);
  	}
}

void tableEntry() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_0>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_9> | tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		String type = attr.getValue(GroupCode.GC0);
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String handle = type.equals("DIMSTYLE") ?
			attr.getValue(GroupCode.GC105, val5) : val5;
		String name = type + "@" + handle;
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
  	}
}

// Section BLOCKS --------------------------------------------------------------

void sectionBlocks() :
{
	String val;
}
{
	<S_BLOCKS>
  	{
		m_ch.startSection("BLOCKS");
  	}
  	( blockStart() ( entity() )* blockEnd() )*
	{ 
		m_ch.endSection("BLOCKS");
  	}
}

void blockStart() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <BLK_START>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String name = "BLOCK@" + val5;
		m_ch.startBlock(name, attr);
  	}
}

void blockEnd() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <BLK_END>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String name =  "BLOCK@" + val5;
		m_ch.endBlock(name, attr);
  	}
}

// Section ENTITIES ------------------------------------------------------------

void sectionEntities() :
{
}
{
  	<S_ENTITIES>
  	{
		m_ch.startSection("ENTITIES");
  	}
  	( entity() )*
	{ 
		m_ch.endSection("ENTITIES");
  	}
}

void entity() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_0>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		notifyEntity(attr);
  	}
}

// Section OBJECTS -------------------------------------------------------------

void sectionObjects() :
{
	String val;
}
{
  	<S_OBJECTS>
  	{
		m_ch.startSection("OBJECTS");
  	}
  	( anObject() )*
	{ 
		m_ch.endSection("OBJECTS");
  	}
}

void anObject() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_0>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_9> | tok = <TOKEN_X> {attr.add(tok);} )*
	{ 
		attr.setLastParsedLine(tok.beginLine + 1);
		String val5 = attr.valueExists(GroupCode.GC5) ?
			attr.getValue(GroupCode.GC5) : "null";
		String name = attr.getValue(GroupCode.GC0) + "@" + val5;
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
  	}
}

// Section THUMBS --------------------------------------------------------------

void sectionThumbs() :
{
}
{
	<S_THUMBS>
  	{
		m_ch.startSection("THUMBNAILIMAGE");
  	}
  	thumb()
	{ 
		m_ch.endSection("THUMBNAILIMAGE");
  	}
}

void thumb() :
{
	Token tok;
	AttributesAdapter attr = new AttributesAdapter();
}
{
	tok = <TOKEN_X>
	{
		attr.add(tok);
		attr.setFirstParsedLine(tok.beginLine);
	}
	( tok = <TOKEN_X> {attr.add(tok);} )*
	{
		attr.setLastParsedLine(tok.beginLine + 1);
		String name = "THUMBNAILIMAGE";
		m_ch.startElement(name, attr);
		m_ch.endElement(name);
  	}
}
